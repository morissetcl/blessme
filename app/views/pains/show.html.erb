<% content_for :meta_title, "#{@pain.title}" %>
<% content_for :meta_description, @pain.description %>
<% content_for :meta_image, "#{@pain.category.downcase}.jpg" %>

<div class="pain-container">
  <div class="pain-header">
    <div class="user-infos">
      <%= link_to user_path(@pain.user) do %>
        <% if @pain.user.facebook_picture_url != nil %>
          <%= image_tag(@pain.user.facebook_picture_url, class:"profile_picture") %>
        <% elsif @pain.user.photo.url != nil %>
          <%= image_tag(@pain.user.photo, class:"profile_picture")%>
        <% else %>
          <%= cl_image_tag("avatar_dymvhr.png", class:"profile_picture") %>
        <% end %>
      <% end %>
       <div class="user-description">
        <div class="user-text hidden-xs">
          <% if @pain.user.username.blank?  %>
            <p><%= @pain.user.first_name %></p>
          <% else %>
            <p><%= @pain.user.username %></p>
          <% end %>
          <p><%= @pain.user.city %></p>
          <p><%= @pain.user.religion %></p>
        </div>
         <div class="user-text hidden-sm hidden-md hidden-lg">
          <p><%= @pain.user.username %></p>
        </div>
      </div>
    </div>
    <div class="pain-title">
      <h1><%= @pain.title %></h1>
    </div>
    <div class="pain-thoughts">
      <div class="fire hidden-xs ">
        <span class="thoughts"></span><i class="fa fa-fire fa-2x firetop" aria-hidden="true" id="counter"></i><div class="firenumber"><%=pluralize @pain.get_upvotes.size, "pensée" %></div>
      </div>
      <div class="fire hidden-sm hidden-md hidden-lg">
        <span class="thoughts"></span><i class="fa fa-fire fa-2x firetop" aria-hidden="true" id="counter"></i><div class="firenumber"><%=@pain.get_upvotes.size%></div>
      </div>
    </div>
  </div>

  <div class="pain-body">
    <div class="pain-description">
      <p class= "left-quote"><i class="fa fa-quote-left" aria-hidden="true"></i></p>
       <div class= "pain-text"><p><%= @pain.description %></p></div>
      <p class = "right-quote"><i class="fa fa-quote-right" aria-hidden="true"></i></p>
    </div>
    <!-- pain-footer large-->
    <div class="pain-footer hidden-xs">
      <div class="content signaler" data-id="<%= @pain.id %>">
        <i class="fa fa-exclamation-triangle" aria-hidden="true" id="report-prayer"></i>
      </div>
      <a href="#prayer-form" data-toggle="modal" data-target="#prayer-text-modal">
        <div class="pray-link-write btn-medium text-center">
          <p><i class="fa fa-pencil-square-o" aria-hidden="true" id="prayer-id"></i> Ecrire une prière</p>
        </div>
      </a>
      <a href="#container-audio" data-toggle="modal" data-target="#prayer-audio-modal">
        <div class="pray-link-record btn-medium">
          <p><i class="fa fa-microphone" aria-hidden="true"></i> Prière vocale</p>
        </div>
      </a>
      <div class="pray-link-thought btn-medium" id="button_fire" data-id="<%= @pain.id %>">
        <p><i class="fa fa-fire" aria-hidden="true"></i>
        <% @pain.get_upvotes.size %>Envoyer une pensée</p>
      </div>
      <div class="prayer-shuffle btn btn-medium">
        <%= link_to pain_path(@pain.category) do %>
          <p><i class="fa fa-repeat" aria-hidden="true"></i> Relancer</p>
        <% end %>
      </div>
    </div>
    <!-- pain-footer small-->
    <div class="pain-footer hidden-sm hidden-md hidden-lg  ">
      <div class="content signaler" data-id="<%= @pain.id %>">
        <i class="fa fa-exclamation-triangle" aria-hidden="true" id="report-prayer"></i>
      </div>
    </a>
    <% if browser.safari? || browser.ie?%>
      <p></p>
    <% else %>
     <a href="#container-audio" data-toggle="modal" data-target="#prayer-audio-modal">
       <div class="pray-link-record btn-medium">
        <p><i class="fa fa-microphone" aria-hidden="true"></i>   Prière vocale</p>
       </div>
      </a>
    <% end %>


    <div class="pray-link-thought btn-medium" id="button_fire" data-id="<%= @pain.id %>">
      <p><i class="fa fa-fire" aria-hidden="true"></i>
      <% @pain.get_upvotes.size %>Envoyer une pensée</p>
    </div>

    <div class="prayer-shuffle btn btn-medium">
      <%= link_to pain_path(@pain.category) do %>
        <p><i class="fa fa-repeat" aria-hidden="true"></i>   Relancer</p>
      <% end %>
    </div>
  </div>

  <!-- pain-footer small-->
    <div class="pain-footer hidden-sm hidden-md hidden-lg  ">
      <div class="content signaler">
        <p id="report_<%= @pain.id %>"><%= link_to report_pain_path(@pain), method: :post, data: { confirm: 'Etes-vous sûr(e)' }, remote: true do %>
          <i class="fa fa-exclamation-triangle" aria-hidden="true" id="report-prayer"></i></p>
        <% end %>
      </div>
      <a href="#prayer-form" data-toggle="modal" data-target="#prayer-text-modal">
        <div class="pray-link-write btn-medium text-center">
          <p><i class="fa fa-pencil-square-o" aria-hidden="true" id="prayer-id"></i></p>
        </div>
      </a>
      <% if browser.safari? || browser.ie?%>
        <p></p>
      <% else %>
        <a href="#container-audio" data-toggle="modal" data-target="#prayer-audio-modal">
          <div class="pray-link-record btn-medium">
            <p><i class="fa fa-microphone" aria-hidden="true"></i></p>
          </div>
        </a>
      <% end %>

      <div class="pray-link-thought btn-medium" id="button_fire" data-id="<%= @pain.id %>">
        <p><i class="fa fa-fire" aria-hidden="true"></i>
        <% @pain.get_upvotes.size %></p>
      </div>

      <div class="prayer-shuffle btn btn-medium">
        <%= link_to pain_path(@pain.category) do %>
          <p><i class="fa fa-repeat" aria-hidden="true"></i></p>
        <% end %>
      </div>
    </div>

  <!-- Modal -->
  <div class="modal fade" id="prayer-text-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-body">
          <%= render "prayer_form", pain: @pain, prayer: @prayer %>
        </div>
      </div>
    </div>
  </div>

<div id="prayer-candle">
 <%= render "pain_candle", pain: @pain %>
</div>

<!-- Prayers -->
<div class="prayers-container" >
  <div class="prayers-card" >
    <h3>Prières</h3>
    <hr>
      <div class="audio-prayer text-center">
        <% if @pain.prayers.empty? %>
          <p>Soyez le premier à prier</p>
        <% else %>
          <% @pain.prayers.order("created_at desc").each do |prayer| %>
            <div class="prayer-list">
              <div class="prayer-btn">
                <% if policy(prayer).edit? %>
                  <%= link_to edit_pain_prayer_path(@pain, prayer) do %>
                    <i class="fa fa-pencil" aria-hidden="true"></i>
                  <% end %>
                <% end %>
                <% if policy(prayer).destroy? %>
                  <i class="fa fa-trash" aria-hidden="true" data-id="<% prayer.id %>"></i>
                <% end %>
                <p id="prayer_report_<%= prayer.id %>"><%= link_to report_prayer_prayer_path(prayer), method: :post, data: {
                  confirm: 'Signalement', swal: {
                    title: 'Signalement',
                    text: "Voulez-vous signaler cette demande ?",
                    type: 'question',
                    show_cancel_button: true,
                    confirm_button_color: '#B56969',
                    cancel_button_color: '#B4D8C0',
                    confirm_button_text: 'Oui',
                    cancel_button_text: 'Non'
                  } }, remote: true do %>
                    <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
                <% end %></p>
              </div>
              <div class="text-prayer">
                <ul class="list-unstyled user-list">
                  <%= link_to user_path(prayer.user) do %>
                    <li><center><% if prayer.user.facebook_picture_url != nil %>
                      <%= image_tag(prayer.user.facebook_picture_url, class:"prayer-profile_picture") %>
                    <% elsif prayer.user.photo.url != nil %>
                      <%= image_tag(prayer.user.photo, class:"prayer-profile_picture")%>
                    <% else %>
                      <%= cl_image_tag("avatar_dymvhr.png", class:"prayer-profile_picture") %>
                    <% end %></center></li>
                  <% end %>
                  <li><strong><%= prayer.user.username %></strong></li>
                </ul>
                <ul class="list-unstyled prayer-text">
                  <li class= "prayer-title"><h4><%= prayer.title %></h4></li>
                  <div class="prayer-description">
                    <li><%= audio_tag prayer.audio.url, controls: true  unless prayer.audio.blank? %></li>
                    <li><%= prayer.description unless prayer.description.blank? %></li>
                  </div>
                </ul>
              </div>
            </div>
          <hr>
        <% end %>
      <% end %>
    </div>
  </div>
</div>

 <!-- prayers -->

<% content_for(:after_js) do %>
 <script>
   var url = "<%= pain_path(@pain, anchor: 'prayer-id') %>"
 </script>
<script>
    var startRecordingButton = document.getElementById("startRecordingButton");
    var stopRecordingButton = document.getElementById("stopRecordingButton");
    var playButton = document.getElementById("playButton");
    var submitButton = document.getElementById("audio-submit-button");
    var leftchannel = [];
    var rightchannel = [];
    var recorder = null;
    var recordingLength = 0;
    var volume = null;
    var mediaStream = null;
    var sampleRate = 44100;
    var context = null;
    var blob = null;


    startRecordingButton.addEventListener("click", function () {
        // Initialize recorder
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        navigator.getUserMedia(
        {
            audio: true
        },

        function (e) {
            console.log("user consent");
            // creates the audio context
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            context = new AudioContext();
            // creates an audio node from the microphone incoming stream
            mediaStream = context.createMediaStreamSource(e);
            // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor
            // bufferSize: the onaudioprocess event is called when the buffer is full
            var bufferSize = 2048;
            var numberOfInputChannels = 2;
            var numberOfOutputChannels = 2;

            if (context.createScriptProcessor) {
                recorder = context.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);
            } else {
                recorder = context.createJavaScriptNode(bufferSize, numberOfInputChannels, numberOfOutputChannels);
            }
            recorder.onaudioprocess = function (e) {
                leftchannel.push(new Float32Array(e.inputBuffer.getChannelData(0)));
                rightchannel.push(new Float32Array(e.inputBuffer.getChannelData(1)));
                recordingLength += bufferSize;
            }
            // we connect the recorder
            mediaStream.connect(recorder);
            recorder.connect(context.destination);
        },
                    function (e) {
                        console.error(e);
                    });
        });
        stopRecordingButton.addEventListener("click", function () {
            // stop recording
            recorder.disconnect(context.destination);
            mediaStream.disconnect(recorder);
            // we flat the left and right channels down
            // Float32Array[] => Float32Array
            var leftBuffer = flattenArray(leftchannel, recordingLength);
            var rightBuffer = flattenArray(rightchannel, recordingLength);
            // we interleave both channels together
            // [left[0],right[0],left[1],right[1],...]
            var interleaved = interleave(leftBuffer, rightBuffer);
            // we create our wav file
            var buffer = new ArrayBuffer(44 + interleaved.length * 2);
            var view = new DataView(buffer);
            // RIFF chunk descriptor
            writeUTFBytes(view, 0, 'RIFF');
            view.setUint32(4, 44 + interleaved.length * 2, true);
            writeUTFBytes(view, 8, 'WAVE');
            // FMT sub-chunk
            writeUTFBytes(view, 12, 'fmt ');
            view.setUint32(16, 16, true); // chunkSize
            view.setUint16(20, 1, true); // wFormatTag
            view.setUint16(22, 2, true); // wChannels: stereo (2 channels)
            view.setUint32(24, sampleRate, true); // dwSamplesPerSec
            view.setUint32(28, sampleRate * 4, true); // dwAvgBytesPerSec
            view.setUint16(32, 4, true); // wBlockAlign
            view.setUint16(34, 16, true); // wBitsPerSample
            // data sub-chunk
            writeUTFBytes(view, 36, 'data');
            view.setUint32(40, interleaved.length * 2, true);
            // write the PCM samples
            var index = 44;
            var volume = 1;
            for (var i = 0; i < interleaved.length; i++) {
                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);
                index += 2;
            }
            recorder.onaudioprocess = function (e) {
                leftchannel.push(new Float32Array(e.inputBuffer.getChannelData(0)));
                rightchannel.push(new Float32Array(e.inputBuffer.getChannelData(1)));
                recordingLength += bufferSize;
            }
            // we connect the recorder
            mediaStream.connect(recorder);
            recorder.connect(context.destination);
        },
                    function (e) {
                        console.error(e);
                    });
    });
    stopRecordingButton.addEventListener("click", function () {
        // stop recording
        recorder.disconnect(context.destination);
        mediaStream.disconnect(recorder);
        // we flat the left and right channels down
        // Float32Array[] => Float32Array
        var leftBuffer = flattenArray(leftchannel, recordingLength);
        var rightBuffer = flattenArray(rightchannel, recordingLength);
        // we interleave both channels together
        // [left[0],right[0],left[1],right[1],...]
        var interleaved = interleave(leftBuffer, rightBuffer);
        // we create our wav file
        var buffer = new ArrayBuffer(44 + interleaved.length * 2);
        var view = new DataView(buffer);
        // RIFF chunk descriptor
        writeUTFBytes(view, 0, 'RIFF');
        view.setUint32(4, 44 + interleaved.length * 2, true);
        writeUTFBytes(view, 8, 'WAVE');
        // FMT sub-chunk
        writeUTFBytes(view, 12, 'fmt ');
        view.setUint32(16, 16, true); // chunkSize
        view.setUint16(20, 1, true); // wFormatTag
        view.setUint16(22, 2, true); // wChannels: stereo (2 channels)
        view.setUint32(24, sampleRate, true); // dwSamplesPerSec
        view.setUint32(28, sampleRate * 4, true); // dwAvgBytesPerSec
        view.setUint16(32, 4, true); // wBlockAlign
        view.setUint16(34, 16, true); // wBitsPerSample
        // data sub-chunk
        writeUTFBytes(view, 36, 'data');
        view.setUint32(40, interleaved.length * 2, true);
        // write the PCM samples
        var index = 44;
        var volume = 1;
        for (var i = 0; i < interleaved.length; i++) {
            view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);
            index += 2;
        }
        // our final blob
        blob = new Blob([view], { type: 'audio/wav' });
    });
    playButton.addEventListener("click", function () {
        if (blob == null) {
            return;
        }
        var url = window.URL.createObjectURL(blob);
        var audio = new Audio(url);
        audio.play();
    });
    submitButton.addEventListener("click", function (e) {
        e.preventDefault();
        if (blob == null) {
            return;
        }
        var reader = new FileReader();
        reader.onload = function(event){
              $("#audio-prayer-form input#prayer_audio")[0].value = event.target.result;
              $("#audio-prayer-form").submit();
        };
        reader.readAsDataURL(blob);
        return true;
    });
    function flattenArray(channelBuffer, recordingLength) {
        var result = new Float32Array(recordingLength);
        var offset = 0;
        for (var i = 0; i < channelBuffer.length; i++) {
            var buffer = channelBuffer[i];
            result.set(buffer, offset);
            offset += buffer.length;
        }
        return result;
    }
    function interleave(leftChannel, rightChannel) {
        var length = leftChannel.length + rightChannel.length;
        var result = new Float32Array(length);
        var inputIndex = 0;
        for (var index = 0; index < length;) {
            result[index++] = leftChannel[inputIndex];
            result[index++] = rightChannel[inputIndex];
            inputIndex++;
        }
        return result;
    }
    function writeUTFBytes(view, offset, string) {
        for (var i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    }
  </script>
<% end %>
